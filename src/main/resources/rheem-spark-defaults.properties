spark.master = local
spark.app.name = Rheem App
spark.ui.showConsoleProgress = false

rheem.spark.cpu.mhz = 2700
rheem.spark.machines = 10
rheem.spark.cores-per-machine = 2
rheem.spark.hdfs.ms-per-mb = 2.7
rheem.spark.network.ms-per-mb = 8.6
rheem.spark.init.ms = 4500

rheem.spark.map.load = {\
  "in":1, "out":1,\
  "cpu":"${700*in0 + 56789}",\
  "ram":"10000",\
  "disk":"0",\
  "net":"${0.2*out0 + 2000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

# Adapted from rheem.spark.map.load.
rheem.spark.zipwithid.load = {\
  "in":1, "out":1,\
  "cpu":"${1000*in0 + 56789}",\
  "ram":"10000",\
  "disk":"0",\
  "net":"${0.2*out0 + 2000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

rheem.spark.mappartitions.load = {\
  "in":1, "out":1,\
  "cpu":"${600*in0 + 600*out0 + 56789}",\
  "ram":"10000",\
  "disk":"0",\
  "net":"${0.2*out0 + 2000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

rheem.spark.filter.load = {\
  "in":1, "out":1,\
  "cpu":"${500*in0 + 56789}",\
  "ram":"10000",\
  "disk":"0",\
  "net":"0",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

rheem.spark.flatmap.load = {\
  "in":1, "out":1,\
  "cpu":"${600*in0 + 600*out0 + 56789}",\
  "ram":"10000",\
  "disk":"0",\
  "net":"${0.2 * in0 + 2000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

rheem.spark.reduceby.load = {\
  "in":1, "out":1,\
  "cpu":"${17000*in0 + 56789}",\
  "ram":"10000",\
  "disk":"${in0}",\
  "net":"${0.3*in0 + 43000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

rheem.spark.groupby.load = {\
  "in":1, "out":1,\
  "cpu":"${17000*in0 + 56789}",\
  "ram":"10000",\
  "disk":"${in0}",\
  "net":"${0.3*in0 + 430000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

rheem.spark.sort.load = {\
  "in":1, "out":1,\
  "cpu":"${17000*in0 + 56789}",\
  "ram":"10000",\
  "disk":"${in0}",\
  "net":"${0.3*in0 + 430000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

rheem.spark.globalreduce.load = {\
  "in":1, "out":1,\
  "cpu":"${300*in0 + 56789}",\
  "ram":"0",\
  "disk":"0",\
  "net":"200000",\
  "p":0.9,\
  "overhead":100,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

# NB: Not measured but adapted from groupby and globalreduce.
rheem.spark.globalgroup.load = {\
  "in":1, "out":1,\
  "cpu":"${400*in0 + 56789}",\
  "ram":"0",\
  "disk":"0",\
  "net":"200000",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

rheem.spark.count.load = {\
  "in":1, "out":1,\
  "cpu":"${1000*in0 + 56789}",\
  "ram":"0",\
  "disk":"0",\
  "net":"125000",\
  "p":0.9,\
  "overhead":100,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

rheem.spark.distinct.load = {\
  "in":1, "out":1,\
  "cpu":"${17000*in0 + 56789}",\
  "ram":"0",\
  "disk":"0",\
  "net":"${4*in0 + 430000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

rheem.spark.join.load = {\
  "in":2, "out":1,\
  "cpu":"${170000 * (in0 + in1 + out0) + 56789}",\
  "ram":"0",\
  "disk":"${20 * in0}",\
  "net":"${20 * (in0 + in1 + out0) + 430000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0 + in1)}"\
}

# NB: Not measured. Adapted from rheem.spark.join.load.
rheem.spark.intersect.load = {\
  "in":2, "out":1,\
  "cpu":"${130000 * (in0 + in1 + out0) + 56789}",\
  "ram":"0",\
  "disk":"${20 * in0}",\
  "net":"${20 * (in0 + in1 + out0) + 430000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0 + in1)}"\
}

rheem.spark.cartesian.load = {\
  "in":2, "out":1,\
  "cpu":"${20000000*in0 + 10000000*in1 + 100*out0 + 56789}",\
  "ram":"0",\
  "disk":"0",\
  "net":"${20000*(in0 + in1) + 1700000}",\
  "p":0.9,\
  "overhead":1000,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0 + in1)}"\
}

rheem.spark.union.load = {\
  "in":2, "out":1,\
  "cpu":"56789",\
  "ram":"0",\
  "disk":"0",\
  "net":"0",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0 + in1)}"\
}

# NB: This operator was not measured. The figures are based on SparkCollectionSource and SparkLocalCallbackSink.
rheem.spark.broadcast.load = {\
  "in":1, "out":1,\
  "cpu":"${5500*out0 + 56789}",\
  "ram":"${100*out0 + 12000}",\
  "disk":"0",\
  "net":"${9.5*in0 + 45000}",\
  "p":0.9,\
  "overhead":100,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

# NB: Not measured but adapted from SparkLocalCallbackSink.
rheem.spark.cache.load = {\
  "in":1, "out":1,\
  "cpu":"${4000*out0 + 56789}",\
  "ram":"10000",\
  "disk":"0",\
  "net":"${4.5*in0 + 43000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

# NB: Not measured but adapted from SparkCollectionSource.
rheem.spark.loop.load = {\
  "in":4, "out":3,\
  "cpu":"${5000*in3 + 56789}",\
  "ram":"10000",\
  "disk":"0",\
  "net":"${4.5*in0 + 43000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0 + in1 + in2 + in3)}"\
}

# NB: Not measured but adapted from SparkCollectionSource.
rheem.spark.while.load = {\
  "in":3, "out":2,\
  "cpu":"${4000*in2 + 56789}",\
  "ram":"10000",\
  "disk":"0",\
  "net":"${4.5*in0 + 43000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0 + in1 + in2)}"\
}

rheem.spark.collectionsource.load = {\
  "in":0, "out":1,\
  "cpu":"${1500*out0 + 56789}",\
  "ram":"${100*out0 + 2000}",\
  "disk":"${5*out0 + 2000}",\
  "net":"0",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, out0)}"\
}

# NB: Not measured but adapted from SparkLocalCallbackSink.
rheem.spark.collect.load = {\
  "in":1, "out":1,\
  "cpu":"${100*in0 + 56789}",\
  "ram":"10000",\
  "disk":"0",\
  "net":"${4.5*in0 + 43000}",\
  "p":0.9,\
  "overhead":100,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

# NB: Not measured but adapted from SparkLocalCallbackSink.
rheem.spark.localcallbacksink.load = {\
  "in":1, "out":0,\
  "cpu":"${4000*in0 + 56789}",\
  "ram":"10000",\
  "disk":"0",\
  "net":"${4.5*in0 + 43000}",\
  "p":0.9,\
  "overhead":100,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

rheem.spark.textfilesource.load = {\
  "in":0, "out":1,\
  "cpu":"${500*out0 + 56789}",\
  "ram":"${10*out0}",\
  "disk":"${out0/10}",\
  "net":"${out0 * 10 + 5000000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, out0)}"\
}

# NB: Not measured, instead adapted from SparkTextFileSource.
rheem.spark.objectfilesource.load = {\
  "in":0, "out":1,\
  "cpu":"${700*out0 + 56789}",\
  "ram":"${10*out0}",\
  "disk":"${out0/10}",\
  "net":"${out0 * 10 + 5000000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, out0)}"\
}

# NB: Not measured, instead adapted from SparkTextFileSource.
rheem.spark.objectfilesink.load = {\
  "in":1, "out":0,\
  "cpu":"${500*in0 + 56789}",\
  "ram":"${10*in0}",\
  "disk":"${in0/10}",\
  "net":"${in0 * 10 + 5000000}",\
  "p":0.9,\
  "overhead":100,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}

# NB: Not measured, instead adapted from SparkTextFileSource.
rheem.spark.tsvfilesource.load = {\
  "in":0, "out":1,\
  "cpu":"${700*out0 + 56789}",\
  "ram":"${10*out0}",\
  "disk":"${out0/10}",\
  "net":"${out0 * 10 + 5000000}",\
  "p":0.9,\
  "overhead":0,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, out0)}"\
}

# NB: Not measured, instead adapted from SparkTextFileSource.
rheem.spark.tsvfilesink.load = {\
  "in":1, "out":0,\
  "cpu":"${500*in0 + 56789}",\
  "ram":"${10*in0}",\
  "disk":"${in0/10}",\
  "net":"${in0 * 10 + 5000000}",\
  "p":0.9,\
  "overhead":100,\
  "ru":"${rheem:logGrowth(0.1, 0.1, 1000000, in0)}"\
}